{"name": "Поиск по корректному коду клиента: ", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 190 (char 189)", "trace": "self = <101_service_test.TestSuite object at 0x0000023781A1E510>, customerId = '008.119115'\n\n    @allure.sub_suite(\"Позитивные тест-кейсы\")\n    @pytest.mark.parametrize(\"customerId\", [\"008.119115\"], ids=[\"008.119115\"])\n    @allure.title(\"Поиск по корректному коду клиента: \")\n    @allure.description(\"Этот тест проверяет успешный запрос по коду клиента\")\n    def test_get_list_account_10_letter_in_customerId_get_success_response(self,customerId):\n>       positive_assert_customerId(customerId)\n\n101_service_test.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n101_service_test.py:29: in positive_assert_customerId\n    response_data = json.loads(payment_response.text)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x00000237808FCC10>\ns = '{\"id\": \"2208A15C-CF68-4948-8E0C-94BD82CDD0F8\",\"responseCode\": \"2\",\"responseMessage\": \"Newtonsoft.Json.JsonReaderExcep...  at GateWayCore.Controllers.GateWayController.Post() in /src/GateWayCore/Controllers/GateWayController.cs:line 102:\"}'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Invalid control character at: line 1 column 190 (char 189)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\json\\decoder.py:353: JSONDecodeError"}, "description": "Этот тест проверяет успешный запрос по коду клиента", "steps": [{"name": "Проверка отправленного запроса", "status": "passed", "attachments": [{"name": "{'version': '1.0', 'type': '101', 'id': '2208A15C-CF68-4948-8E0C-94BD82CDD0F8', 'dateTime': '05.10.2023 11:25:52.770434 +06:00', 'source': 'Creatio', 'body': [{'customerId': '008.119115'}]}", "source": "7db65da8-8e38-4de4-ba3a-1b024e07e720-attachment.json", "type": "application/json"}], "start": 1715677279020, "stop": 1715677279021}, {"name": "Проверка тела ответа", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Invalid control character at: line 1 column 190 (char 189)\n", "trace": "  File \"C:\\Users\\001057\\PycharmProjects\\service_Testing\\101_service_test.py\", line 29, in positive_assert_customerId\n    response_data = json.loads(payment_response.text)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\001057\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\json\\__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\001057\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\001057\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\n               ^^^^^^^^^^^^^^^^^^^^^^\n"}, "attachments": [{"name": "{\"id\": \"2208A15C-CF68-4948-8E0C-94BD82CDD0F8\",\"responseCode\": \"2\",\"responseMessage\": \"Newtonsoft.Json.JsonReaderException: Error reading JArray from JsonReader. Path '', line 0, position 0.\n   at Newtonsoft.Json.Linq.JArray.Load(JsonReader reader, JsonLoadSettings settings)\n   at Newtonsoft.Json.Linq.JArray.Parse(String json, JsonLoadSettings settings)\n   at GateWayCore.Controllers.GateWayController.Post() in /src/GateWayCore/Controllers/GateWayController.cs:line 102:\"}", "source": "9bf50db8-d1a7-4d89-87ae-a068c2854a17-attachment.txt", "type": "text/plain"}], "start": 1715677279021, "stop": 1715677279027}], "parameters": [{"name": "customerId", "value": "'008.119115'"}], "start": 1715677277147, "stop": 1715677279032, "uuid": "47d604f9-2b46-4318-9770-f23795a25934", "historyId": "4c198f7299094c9c78aa53b74b090716", "testCaseId": "a0e4226f53fb3f12d39cd129a583f672", "fullName": "101_service_test.TestSuite#test_get_list_account_10_letter_in_customerId_get_success_response", "labels": [{"name": "suite", "value": "(101 сервис) Получение списка карт клиента"}, {"name": "subSuite", "value": "Позитивные тест-кейсы"}, {"name": "host", "value": "PC-411-140322D"}, {"name": "thread", "value": "34040-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "101_service_test"}]}