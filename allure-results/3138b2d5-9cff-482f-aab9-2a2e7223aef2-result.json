{"name": "поиск по корректному счету физ лица: ", "status": "failed", "statusDetails": {"message": "AssertionError: Поле 'acc' отсутствует в первом элементе 'body'\nassert 'acc' in {'account': {'activeFl': 0, 'allowedCreditFl': 1, 'allowedDebitFl': 1, 'cardFl': 0, ...}, 'balance': {'allowedCreditFl...ТАН, ЧУЙ обл, КАРА-БАЛТА г, КОМСОМОЛЬСКАЯ ул, дом 58', 'birthDate': '20.06.2000 00:00:00', 'blackListFl': 0, ...}, ...}", "trace": "self = <102_service_test.TestSuite object at 0x000001B5ED2F9F90>, identifier = '1250820004787445'\n\n    @allure.sub_suite(\"Позитивные тест-кейсы\")\n    @pytest.mark.parametrize(\"identifier\", [\"1250820004787445\"], ids=[\"1250820004787445\"])\n    @allure.title(\"поиск по корректному счету физ лица: \")\n    @allure.description(\"Этот тест проверяет успешный запрос по номеру счета\")\n    def test_get_info_account_16_letter_in_identifier_get_success_response(self, identifier):\n>       positive_assert_identifier(identifier)\n\n102_service_test.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nidentifier = '1250820004787445'\n\n    def positive_assert_identifier(identifier):\n        service_102_body = get_102_body(identifier)\n        payment_response = esb_request.service_post(service_102_body)\n    \n        # Получаем ответ в формате JSON\n        response_json = payment_response.json()\n    \n        with allure.step(\"Проверка тела ответа\"):\n            # Ожидаемые поля в теле ответа\n            expected_fields = [\n                \"fromJournal\",\n                \"version\",\n                \"type\",\n                \"id\",\n                \"dateTime\",\n                \"source\",\n                \"restartAllowed\",\n                \"responseCode\",\n                \"responseMessage\",\n                \"body\"\n            ]\n    \n            # Проверяем наличие каждого поля в ответе\n            for field in expected_fields:\n                assert field in response_json, f\"Поле '{field}' отсутствует в ответе\"\n    \n            # Проверка наличия поля \"body\" и его структуры\n            assert \"body\" in response_json, \"Поле 'body' отсутствует в ответе\"\n            assert isinstance(response_json[\"body\"], list), \"Поле 'body' не является списком\"\n    \n            # Если в теле ответа присутствует хотя бы один элемент, проверяем его содержимое\n            if response_json[\"body\"]:\n                assert isinstance(response_json[\"body\"][0], dict), \"Элемент 'body' не является словарем\"\n    \n                # Проверяем наличие поля \"acc\" в первом элементе \"body\"\n>               assert \"acc\" in response_json[\"body\"][0], \"Поле 'acc' отсутствует в первом элементе 'body'\"\nE               AssertionError: Поле 'acc' отсутствует в первом элементе 'body'\nE               assert 'acc' in {'account': {'activeFl': 0, 'allowedCreditFl': 1, 'allowedDebitFl': 1, 'cardFl': 0, ...}, 'balance': {'allowedCreditFl...ТАН, ЧУЙ обл, КАРА-БАЛТА г, КОМСОМОЛЬСКАЯ ул, дом 58', 'birthDate': '20.06.2000 00:00:00', 'blackListFl': 0, ...}, ...}\n\n102_service_test.py:48: AssertionError"}, "description": "Этот тест проверяет успешный запрос по номеру счета", "steps": [{"name": "Проверка тела ответа", "status": "failed", "statusDetails": {"message": "AssertionError: Поле 'acc' отсутствует в первом элементе 'body'\nassert 'acc' in {'account': {'activeFl': 0, 'allowedCreditFl': 1, 'allowedDebitFl': 1, 'cardFl': 0, ...}, 'balance': {'allowedCreditFl...ТАН, ЧУЙ обл, КАРА-БАЛТА г, КОМСОМОЛЬСКАЯ ул, дом 58', 'birthDate': '20.06.2000 00:00:00', 'blackListFl': 0, ...}, ...}\n", "trace": "  File \"C:\\Users\\001057\\PycharmProjects\\service_Testing\\102_service_test.py\", line 48, in positive_assert_identifier\n    assert \"acc\" in response_json[\"body\"][0], \"Поле 'acc' отсутствует в первом элементе 'body'\"\n"}, "start": 1714129001418, "stop": 1714129001418}], "parameters": [{"name": "identifier", "value": "'1250820004787445'"}], "start": 1714129001255, "stop": 1714129001422, "uuid": "d8e0bb9b-c933-49ec-914a-f599e0458e91", "historyId": "a22623f2d203e6dc7214ec11b9d59e56", "testCaseId": "82415ab764d263d94dd2ba50e6a300b4", "fullName": "102_service_test.TestSuite#test_get_info_account_16_letter_in_identifier_get_success_response", "labels": [{"name": "suite", "value": "Получение информации по номеру счета/карты (102 сервис)"}, {"name": "subSuite", "value": "Позитивные тест-кейсы"}, {"name": "host", "value": "PC-411-140322D"}, {"name": "thread", "value": "280-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "102_service_test"}]}