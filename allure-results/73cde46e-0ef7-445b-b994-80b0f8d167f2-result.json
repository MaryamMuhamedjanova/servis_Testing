{"name": "Снятие наличных с банковского счета (KGS)", "status": "broken", "statusDetails": {"message": "jsonschema.exceptions.ValidationError: '007' was expected\n\nFailed validating 'const' in schema['properties']['type']:\n    {'const': '007', 'type': 'string'}\n\nOn instance['type']:\n    '008'", "trace": "self = <008_service_test.TestAmountSuite object at 0x00000132162457D0>, accountDebit = {'currency': 'KGS', 'department': '125001', 'number': '1250110000041083'}, accountCredit = {'department': '125001'}\n\n    @allure.sub_suite(\"Тесты с различными значениями для счета кредита(accountDebit)\")\n    @allure.title(\"Снятие наличных с банковского счета (KGS)\")\n    @pytest.mark.parametrize(\"accountDebit, accountCredit\", [\n        (\n                {\n                    \"department\": \"125001\",\n                    \"number\": \"1250110000041083\",\n                    \"currency\": \"KGS\"\n                },\n                {\n                    \"department\": \"125001\"\n                }\n        )\n    ])\n    \n    def test_specific_accountDebit_and_accountCredit(self, accountDebit, accountCredit):\n>       positive_assert_amount_with_accountDebit_and_accountCredit(accountDebit, accountCredit)\n\n008_service_test.py:142: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n008_service_test.py:109: in positive_assert_amount_with_accountDebit_and_accountCredit\n    check_response_with_schema(payment_response.json())\n008_service_test.py:57: in check_response_with_schema\n    jsonschema.validate(instance=response_json, schema=response_schema)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ninstance = {'body': [{'accountCredit': {'department': '125001', 'number': None}, 'depId': '1094', 'docDate': '29.05.2024 00:00:00..., ...}], 'dateTime': '29.05.2024 15:23:08.913', 'id': '715e0c91-6e57-4e1b-88be-69c0ccb51eea', 'responseCode': '0', ...}\nschema = {'properties': {'body': {'items': {'properties': {'accountCredit': {'properties': {...}, 'required': [...], 'type': 'o... 'string'}, ...}, 'required': ['version', 'type', 'id', 'dateTime', 'source', 'restartAllowed', ...], 'type': 'object'}\ncls = <class 'jsonschema.validators.Draft202012Validator'>, args = (), kwargs = {}\nvalidator = Draft202012Validator(schema={'properties': {'body': {'items': {'properties': {'accountCredit': {'properties': {...}, '...uired': ['version', 'type', 'id', 'dateTime', 'source', 'restartAllowed', ...], 'type': 'object'}, format_checker=None)\nerror = <ValidationError: \"'007' was expected\">\n\n    def validate(instance, schema, cls=None, *args, **kwargs):  # noqa: D417\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`~jsonschema.validators.validate` will first verify that the\n        provided schema is itself valid, since not doing so can lead to less\n        obvious error messages and fail in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially\n        if you intend to validate multiple instances with\n        the same schema, you likely would prefer using the\n        `jsonschema.protocols.Validator.validate` method directly on a\n        specific validator (e.g. ``Draft202012Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (jsonschema.protocols.Validator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen\n        in accordance with the specification. First, if the schema has a\n        :kw:`$schema` keyword containing a known meta-schema [#]_ then the\n        proper validator will be used. The specification recommends that\n        all schemas contain :kw:`$schema` properties for this reason. If no\n        :kw:`$schema` property is found, the default validator class is the\n        latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed\n        on when instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError`:\n    \n                if the instance is invalid\n    \n            `jsonschema.exceptions.SchemaError`:\n    \n                if the schema itself is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n    \n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: '007' was expected\nE           \nE           Failed validating 'const' in schema['properties']['type']:\nE               {'const': '007', 'type': 'string'}\nE           \nE           On instance['type']:\nE               '008'\n\nvenv\\Lib\\site-packages\\jsonschema\\validators.py:1332: ValidationError"}, "steps": [{"name": "Проверка отправленного запроса", "status": "passed", "attachments": [{"name": "{\"body\": [{\"accountDebit\": {\"department\": \"125001\", \"number\": \"1250110000041083\", \"currency\": \"KGS\"}, \"accountCredit\": {\"department\": \"125001\"}, \"incomFl\": 0, \"amount\": 10, \"currency\": \"KGS\", \"knp\": {\"gkpo\": \"55501027\", \"pb\": \"null\", \"vpb\": \"null\", \"cashSign\": \"34\"}, \"description\": \"Выдача из кассы\"}]}", "source": "589d0dd7-8190-43ee-838f-6f6ba93f1d55-attachment.json", "type": "application/json"}], "start": 1716974588666, "stop": 1716974588668}, {"name": "Проверка тела ответа", "status": "broken", "statusDetails": {"message": "jsonschema.exceptions.ValidationError: '007' was expected\n\nFailed validating 'const' in schema['properties']['type']:\n    {'const': '007', 'type': 'string'}\n\nOn instance['type']:\n    '008'\n", "trace": "  File \"C:\\Users\\001057\\PycharmProjects\\service_Testing\\008_service_test.py\", line 109, in positive_assert_amount_with_accountDebit_and_accountCredit\n    check_response_with_schema(payment_response.json())\n  File \"C:\\Users\\001057\\PycharmProjects\\service_Testing\\008_service_test.py\", line 57, in check_response_with_schema\n    jsonschema.validate(instance=response_json, schema=response_schema)\n  File \"C:\\Users\\001057\\PycharmProjects\\service_Testing\\venv\\Lib\\site-packages\\jsonschema\\validators.py\", line 1332, in validate\n    raise error\n"}, "attachments": [{"name": "{\n  \"version\": \"1.0\",\n  \"type\": \"008\",\n  \"id\": \"715e0c91-6e57-4e1b-88be-69c0ccb51eea\",\n  \"dateTime\": \"29.05.2024 15:23:08.913\",\n  \"source\": \"Creatio\",\n  \"restartAllowed\": 0,\n  \"responseCode\": \"0\",\n  \"responseMessage\": \"Документ успешно создан\",\n  \"body\": [\n    {\n      \"responseCode\": \"0\",\n      \"responseMessage\": \"Документ успешно создан\",\n      \"accountCredit\": {\n        \"department\": \"125001\",\n        \"number\": null\n      },\n      \"docNum\": \"25-000027\",\n      \"sumProp\": \"Десять сом 00 тыйын\",\n      \"depId\": \"1094\",\n      \"docId\": \"124969510\",\n      \"docDate\": \"29.05.2024 00:00:00\"\n    }\n  ]\n}", "source": "75f56ad0-0d6d-4a9c-ac7e-0e58802c343d-attachment.txt", "type": "text/plain"}], "start": 1716974588668, "stop": 1716974588679}], "parameters": [{"name": "accountDebit", "value": "{'department': '125001', 'number': '1250110000041083', 'currency': 'KGS'}"}, {"name": "accountCredit", "value": "{'department': '125001'}"}], "start": 1716974587671, "stop": 1716974588681, "uuid": "b37e856b-eb3a-41a7-857e-225e024128d3", "historyId": "e0d86210ba39f1321b39dc1d01563a4f", "testCaseId": "1294d7fd61d615377db10470c5258405", "fullName": "008_service_test.TestAmountSuite#test_specific_accountDebit_and_accountCredit", "labels": [{"name": "subSuite", "value": "Тесты с различными значениями для счета кредита(accountDebit)"}, {"name": "suite", "value": "(008 сервис) Снятие наличных с банковского счета"}, {"name": "host", "value": "PC-411-140322D"}, {"name": "thread", "value": "27168-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "008_service_test"}]}