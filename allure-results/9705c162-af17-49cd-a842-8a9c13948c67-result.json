{"name": "Перевод со счета клиента одного подразделения на карту того же клиента в другом подразделении  (KGS->USD)", "status": "broken", "statusDetails": {"message": "jsonschema.exceptions.ValidationError: None is not of type 'array'\n\nFailed validating 'type' in schema['properties']['body']:\n    {'items': {'properties': {'creditAmount': {'type': 'number'},\n                              'creditCurrency': {'type': 'string'},\n                              'debitAmount': {'type': 'number'},\n                              'debitCurrency': {'type': 'string'},\n                              'depId': {'type': 'string'},\n                              'docDate': {'type': 'string'},\n                              'docId': {'type': 'string'},\n                              'docNum': {'type': 'string'},\n                              'operDate': {'type': 'string'},\n                              'responseCode': {'type': 'string'},\n                              'responseMessage': {'type': 'string'}},\n               'required': ['responseCode',\n                            'responseMessage',\n                            'docNum',\n                            'debitAmount',\n                            'debitCurrency',\n                            'creditAmount',\n                            'creditCurrency',\n                            'depId',\n                            'docId',\n                            'docDate',\n                            'operDate'],\n               'type': 'object'},\n     'type': 'array'}\n\nOn instance['body']:\n    None", "trace": "self = <014_service_test.TestAmountSuite object at 0x0000018FEB727750>, accountDebit = {}, accountCredit = {}\n\n    @allure.sub_suite(\"Тесты с различными значениями для счета дебета(accountDebit) и счета кредита(accountCredit)\")\n    @allure.title(\"Перевод со счета клиента одного подразделения на карту того же клиента в другом подразделении  (KGS->USD)\")\n    @pytest.mark.parametrize(\"accountDebit, accountCredit\", [\n        (\n                {\n    \n                },\n                {\n    \n                }\n        )\n    ])\n    \n    def test_specific_accountDebit_and_accountCredit_USD(self, accountDebit, accountCredit):\n>       positive_assert_amount_with_accountDebit_and_accountCredit(accountDebit, accountCredit)\n\n014_service_test.py:192: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n014_service_test.py:102: in positive_assert_amount_with_accountDebit_and_accountCredit\n    check_response_with_schema(payment_response.json())\n014_service_test.py:51: in check_response_with_schema\n    jsonschema.validate(instance=response_json, schema=response_schema)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ninstance = {'body': None, 'dateTime': '11.05.2024 16:38:03.719', 'id': 'a6542c79-a76d-479b-b575-ed9b670158dd', 'responseCode': '-20100', ...}\nschema = {'properties': {'body': {'items': {'properties': {'creditAmount': {'type': 'number'}, 'creditCurrency': {'type': 'stri... 'string'}, ...}, 'required': ['version', 'type', 'id', 'dateTime', 'source', 'restartAllowed', ...], 'type': 'object'}\ncls = <class 'jsonschema.validators.Draft202012Validator'>, args = (), kwargs = {}\nvalidator = Draft202012Validator(schema={'properties': {'body': {'items': {'properties': {'creditAmount': {'type': 'number'}, 'cre...uired': ['version', 'type', 'id', 'dateTime', 'source', 'restartAllowed', ...], 'type': 'object'}, format_checker=None)\nerror = <ValidationError: \"None is not of type 'array'\">\n\n    def validate(instance, schema, cls=None, *args, **kwargs):  # noqa: D417\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`~jsonschema.validators.validate` will first verify that the\n        provided schema is itself valid, since not doing so can lead to less\n        obvious error messages and fail in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially\n        if you intend to validate multiple instances with\n        the same schema, you likely would prefer using the\n        `jsonschema.protocols.Validator.validate` method directly on a\n        specific validator (e.g. ``Draft202012Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (jsonschema.protocols.Validator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen\n        in accordance with the specification. First, if the schema has a\n        :kw:`$schema` keyword containing a known meta-schema [#]_ then the\n        proper validator will be used. The specification recommends that\n        all schemas contain :kw:`$schema` properties for this reason. If no\n        :kw:`$schema` property is found, the default validator class is the\n        latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed\n        on when instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError`:\n    \n                if the instance is invalid\n    \n            `jsonschema.exceptions.SchemaError`:\n    \n                if the schema itself is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n    \n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: None is not of type 'array'\nE           \nE           Failed validating 'type' in schema['properties']['body']:\nE               {'items': {'properties': {'creditAmount': {'type': 'number'},\nE                                         'creditCurrency': {'type': 'string'},\nE                                         'debitAmount': {'type': 'number'},\nE                                         'debitCurrency': {'type': 'string'},\nE                                         'depId': {'type': 'string'},\nE                                         'docDate': {'type': 'string'},\nE                                         'docId': {'type': 'string'},\nE                                         'docNum': {'type': 'string'},\nE                                         'operDate': {'type': 'string'},\nE                                         'responseCode': {'type': 'string'},\nE                                         'responseMessage': {'type': 'string'}},\nE                          'required': ['responseCode',\nE                                       'responseMessage',\nE                                       'docNum',\nE                                       'debitAmount',\nE                                       'debitCurrency',\nE                                       'creditAmount',\nE                                       'creditCurrency',\nE                                       'depId',\nE                                       'docId',\nE                                       'docDate',\nE                                       'operDate'],\nE                          'type': 'object'},\nE                'type': 'array'}\nE           \nE           On instance['body']:\nE               None\n\nvenv\\Lib\\site-packages\\jsonschema\\validators.py:1332: ValidationError"}, "steps": [{"name": "Проверка отправленного запроса", "status": "passed", "attachments": [{"name": "{\"body\": [{\"accountDebit\": {}, \"accountCredit\": {}, \"amount\": 10, \"currency\": \"KGS\", \"description\": \"Перевод через Yourbi: FX at rate 88.32\", \"rateType\": \"RAT_JUR\", \"dealingRate\": 88.32, \"debitAmount\": 10, \"creditAmount\": 0.11, \"knp\": {\"gkpo\": \"55501000\", \"pb\": \"080402\"}}]}", "source": "fc0dbdb8-1cac-472d-b942-42439e5bb0fd-attachment.json", "type": "application/json"}], "start": 1715423883737, "stop": 1715423883739}, {"name": "Проверка тела ответа", "status": "broken", "statusDetails": {"message": "jsonschema.exceptions.ValidationError: None is not of type 'array'\n\nFailed validating 'type' in schema['properties']['body']:\n    {'items': {'properties': {'creditAmount': {'type': 'number'},\n                              'creditCurrency': {'type': 'string'},\n                              'debitAmount': {'type': 'number'},\n                              'debitCurrency': {'type': 'string'},\n                              'depId': {'type': 'string'},\n                              'docDate': {'type': 'string'},\n                              'docId': {'type': 'string'},\n                              'docNum': {'type': 'string'},\n                              'operDate': {'type': 'string'},\n                              'responseCode': {'type': 'string'},\n                              'responseMessage': {'type': 'string'}},\n               'required': ['responseCode',\n                            'responseMessage',\n                            'docNum',\n                            'debitAmount',\n                            'debitCurrency',\n                            'creditAmount',\n                            'creditCurrency',\n                            'depId',\n                            'docId',\n                            'docDate',\n                            'operDate'],\n               'type': 'object'},\n     'type': 'array'}\n\nOn instance['body']:\n    None\n", "trace": "  File \"C:\\Users\\001057\\PycharmProjects\\service_Testing\\014_service_test.py\", line 102, in positive_assert_amount_with_accountDebit_and_accountCredit\n    check_response_with_schema(payment_response.json())\n  File \"C:\\Users\\001057\\PycharmProjects\\service_Testing\\014_service_test.py\", line 51, in check_response_with_schema\n    jsonschema.validate(instance=response_json, schema=response_schema)\n  File \"C:\\Users\\001057\\PycharmProjects\\service_Testing\\venv\\Lib\\site-packages\\jsonschema\\validators.py\", line 1332, in validate\n    raise error\n"}, "attachments": [{"name": "{\n  \"version\": \"1.0\",\n  \"type\": \"014\",\n  \"id\": \"a6542c79-a76d-479b-b575-ed9b670158dd\",\n  \"dateTime\": \"11.05.2024 16:38:03.719\",\n  \"source\": \"Creatio\",\n  \"restartAllowed\": 0,\n  \"responseCode\": \"-20100\",\n  \"responseMessage\": \"Объект \\\"лицевой счет\\\" должен содержать атрибут number или первичный ключ(dep_id, id) или department\",\n  \"responseErrBackTrace\": \"ORA-06512: на  \\\"COLVIR.ABSGATEOBJ\\\", line 28\\nORA-06512: на  \\\"COLVIR.ABSGATE$CARDPAYMENT\\\", line 38\\nORA-06512: на  line 1\\nORA-06512: на  \\\"COLVIR.ABSGATE\\\", line 587\",\n  \"body\": null\n}", "source": "3639529a-4c9e-4d7a-bb75-d6a05625028e-attachment.txt", "type": "text/plain"}], "start": 1715423883739, "stop": 1715423883746}], "parameters": [{"name": "accountDebit", "value": "{}"}, {"name": "accountCredit", "value": "{}"}], "start": 1715423883253, "stop": 1715423883747, "uuid": "c77b2e30-c5f6-454f-b52f-5509f5ffa778", "historyId": "643a733d393dc09d17a62368b5a38108", "testCaseId": "5cad15057c810ea213e427a48c7074b6", "fullName": "014_service_test.TestAmountSuite#test_specific_accountDebit_and_accountCredit_USD", "labels": [{"name": "subSuite", "value": "Тесты с различными значениями для счета дебета(accountDebit) и счета кредита(accountCredit)"}, {"name": "suite", "value": "Перевод с карты на счет клиента (013 сервис)"}, {"name": "host", "value": "PC-411-140322D"}, {"name": "thread", "value": "23648-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "014_service_test"}]}