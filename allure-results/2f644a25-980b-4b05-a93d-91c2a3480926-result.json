{"name": "Перевод с карты на счет клиента в одном подразделении (KGS->USD)", "status": "broken", "statusDetails": {"message": "jsonschema.exceptions.ValidationError: 'docNum' is a required property\n\nFailed validating 'required' in schema['properties']['body']['items']:\n    {'properties': {'creditAmount': {'type': 'number'},\n                    'creditCurrency': {'type': 'string'},\n                    'debitAmount': {'type': 'number'},\n                    'debitCurrency': {'type': 'string'},\n                    'depId': {'type': 'string'},\n                    'docDate': {'type': 'string'},\n                    'docId': {'type': 'string'},\n                    'docNum': {'type': 'string'},\n                    'operDate': {'type': 'string'},\n                    'responseCode': {'type': 'string'},\n                    'responseMessage': {'type': 'string'}},\n     'required': ['responseCode',\n                  'responseMessage',\n                  'docNum',\n                  'debitAmount',\n                  'debitCurrency',\n                  'creditAmount',\n                  'creditCurrency',\n                  'depId',\n                  'docId',\n                  'docDate',\n                  'operDate'],\n     'type': 'object'}\n\nOn instance['body'][0]:\n    {'responseCode': '-20080',\n     'responseErrBackTrace': 'ORA-06512: на  '\n                             '\"COLVIR.ABSGATE$UNIVERSALPAYMENT\", line 413',\n     'responseMessage': 'Ошибка сервиса списания с карт: Not sufficient '\n                        'funds available'}", "trace": "self = <013_service_test.TestAmountSuite object at 0x0000018FEB725C50>, accountDebit = {'cardFl': 1, 'currency': 'KGS', 'department': '125008', 'inn': '12006200000711', ...}\naccountCredit = {'cardFl': 0, 'currency': 'USD', 'department': '125008', 'inn': '22708199600981', ...}\n\n    @allure.sub_suite(\"Тесты с различными значениями для счета дебета(accountDebit) и счета кредита(accountCredit)\")\n    @allure.title(\"Перевод с карты на счет клиента в одном подразделении (KGS->USD)\")\n    @pytest.mark.parametrize(\"accountDebit, accountCredit\", [\n        (\n                {\n                    \"department\": \"125008\",\n                    \"number\": \"1250820004775119\",\n                    \"currency\": \"KGS\",\n                    \"name\": \"Мухамеджанова Марьям Ахмаджано\",\n                    \"inn\": \"12006200000711\",\n                    \"cardFl\": 1,\n                    \"processing\": \"OW4\"\n                },\n                {\n                    \"department\": \"125008\",\n                    \"number\": \"1250820101177557\",\n                    \"currency\": \"USD\",\n                    \"name\": \"Дубов Александр Вадимович\",\n                    \"inn\": \"22708199600981\",\n                    \"cardFl\": 0,\n                    \"processing\": \"COLVIR\"\n                }\n        )\n    ])\n    \n    def test_specific_accountDebit_and_accountCredit_USD(self, accountDebit, accountCredit):\n>       positive_assert_amount_with_accountDebit_and_accountCredit(accountDebit, accountCredit)\n\n013_service_test.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n013_service_test.py:102: in positive_assert_amount_with_accountDebit_and_accountCredit\n    check_response_with_schema(payment_response.json())\n013_service_test.py:51: in check_response_with_schema\n    jsonschema.validate(instance=response_json, schema=response_schema)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ninstance = {'body': [{'responseCode': '-20080', 'responseErrBackTrace': 'ORA-06512: на  \"COLVIR.ABSGATE$UNIVERSALPAYMENT\", line 4...}], 'dateTime': '11.05.2024 16:38:02.421', 'id': '675ed6d3-9195-478d-adb0-fd89aaf4f78e', 'responseCode': '-20080', ...}\nschema = {'properties': {'body': {'items': {'properties': {'creditAmount': {'type': 'number'}, 'creditCurrency': {'type': 'stri... 'string'}, ...}, 'required': ['version', 'type', 'id', 'dateTime', 'source', 'restartAllowed', ...], 'type': 'object'}\ncls = <class 'jsonschema.validators.Draft202012Validator'>, args = (), kwargs = {}\nvalidator = Draft202012Validator(schema={'properties': {'body': {'items': {'properties': {'creditAmount': {'type': 'number'}, 'cre...uired': ['version', 'type', 'id', 'dateTime', 'source', 'restartAllowed', ...], 'type': 'object'}, format_checker=None)\nerror = <ValidationError: \"'docNum' is a required property\">\n\n    def validate(instance, schema, cls=None, *args, **kwargs):  # noqa: D417\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`~jsonschema.validators.validate` will first verify that the\n        provided schema is itself valid, since not doing so can lead to less\n        obvious error messages and fail in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially\n        if you intend to validate multiple instances with\n        the same schema, you likely would prefer using the\n        `jsonschema.protocols.Validator.validate` method directly on a\n        specific validator (e.g. ``Draft202012Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (jsonschema.protocols.Validator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen\n        in accordance with the specification. First, if the schema has a\n        :kw:`$schema` keyword containing a known meta-schema [#]_ then the\n        proper validator will be used. The specification recommends that\n        all schemas contain :kw:`$schema` properties for this reason. If no\n        :kw:`$schema` property is found, the default validator class is the\n        latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed\n        on when instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError`:\n    \n                if the instance is invalid\n    \n            `jsonschema.exceptions.SchemaError`:\n    \n                if the schema itself is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n    \n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: 'docNum' is a required property\nE           \nE           Failed validating 'required' in schema['properties']['body']['items']:\nE               {'properties': {'creditAmount': {'type': 'number'},\nE                               'creditCurrency': {'type': 'string'},\nE                               'debitAmount': {'type': 'number'},\nE                               'debitCurrency': {'type': 'string'},\nE                               'depId': {'type': 'string'},\nE                               'docDate': {'type': 'string'},\nE                               'docId': {'type': 'string'},\nE                               'docNum': {'type': 'string'},\nE                               'operDate': {'type': 'string'},\nE                               'responseCode': {'type': 'string'},\nE                               'responseMessage': {'type': 'string'}},\nE                'required': ['responseCode',\nE                             'responseMessage',\nE                             'docNum',\nE                             'debitAmount',\nE                             'debitCurrency',\nE                             'creditAmount',\nE                             'creditCurrency',\nE                             'depId',\nE                             'docId',\nE                             'docDate',\nE                             'operDate'],\nE                'type': 'object'}\nE           \nE           On instance['body'][0]:\nE               {'responseCode': '-20080',\nE                'responseErrBackTrace': 'ORA-06512: на  '\nE                                        '\"COLVIR.ABSGATE$UNIVERSALPAYMENT\", line 413',\nE                'responseMessage': 'Ошибка сервиса списания с карт: Not sufficient '\nE                                   'funds available'}\n\nvenv\\Lib\\site-packages\\jsonschema\\validators.py:1332: ValidationError"}, "steps": [{"name": "Проверка отправленного запроса", "status": "passed", "attachments": [{"name": "{\"body\": [{\"accountDebit\": {\"department\": \"125008\", \"number\": \"1250820004775119\", \"currency\": \"KGS\", \"name\": \"Мухамеджанова Марьям Ахмаджано\", \"inn\": \"12006200000711\", \"cardFl\": 1, \"processing\": \"OW4\"}, \"accountCredit\": {\"department\": \"125008\", \"number\": \"1250820101177557\", \"currency\": \"USD\", \"name\": \"Дубов Александр Вадимович\", \"inn\": \"22708199600981\", \"cardFl\": 0, \"processing\": \"COLVIR\"}, \"amount\": 10, \"currency\": \"KGS\", \"description\": \"Перевод через Yourbi: FX at rate 88.32\", \"rateType\": \"RAT_JUR\", \"dealingRate\": 88.32, \"debitAmount\": 10, \"creditAmount\": 0.11, \"knp\": {\"gkpo\": \"55501000\", \"pb\": \"080402\"}}]}", "source": "68fd04f2-bbf5-4545-b200-9b29aeb52040-attachment.json", "type": "application/json"}], "start": 1715423882440, "stop": 1715423882441}, {"name": "Проверка тела ответа", "status": "broken", "statusDetails": {"message": "jsonschema.exceptions.ValidationError: 'docNum' is a required property\n\nFailed validating 'required' in schema['properties']['body']['items']:\n    {'properties': {'creditAmount': {'type': 'number'},\n                    'creditCurrency': {'type': 'string'},\n                    'debitAmount': {'type': 'number'},\n                    'debitCurrency': {'type': 'string'},\n                    'depId': {'type': 'string'},\n                    'docDate': {'type': 'string'},\n                    'docId': {'type': 'string'},\n                    'docNum': {'type': 'string'},\n                    'operDate': {'type': 'string'},\n                    'responseCode': {'type': 'string'},\n                    'responseMessage': {'type': 'string'}},\n     'required': ['responseCode',\n                  'responseMessage',\n                  'docNum',\n                  'debitAmount',\n                  'debitCurrency',\n                  'creditAmount',\n                  'creditCurrency',\n                  'depId',\n                  'docId',\n                  'docDate',\n                  'operDate'],\n     'type': 'object'}\n\nOn instance['body'][0]:\n    {'responseCode': '-20080',\n     'responseErrBackTrace': 'ORA-06512: на  '\n                             '\"COLVIR.ABSGATE$UNIVERSALPAYMENT\", line 413',\n     'responseMessage': 'Ошибка сервиса списания с карт: Not sufficient '\n                        'funds available'}\n", "trace": "  File \"C:\\Users\\001057\\PycharmProjects\\service_Testing\\013_service_test.py\", line 102, in positive_assert_amount_with_accountDebit_and_accountCredit\n    check_response_with_schema(payment_response.json())\n  File \"C:\\Users\\001057\\PycharmProjects\\service_Testing\\013_service_test.py\", line 51, in check_response_with_schema\n    jsonschema.validate(instance=response_json, schema=response_schema)\n  File \"C:\\Users\\001057\\PycharmProjects\\service_Testing\\venv\\Lib\\site-packages\\jsonschema\\validators.py\", line 1332, in validate\n    raise error\n"}, "attachments": [{"name": "{\n  \"version\": \"1.0\",\n  \"type\": \"013\",\n  \"id\": \"675ed6d3-9195-478d-adb0-fd89aaf4f78e\",\n  \"dateTime\": \"11.05.2024 16:38:02.421\",\n  \"source\": \"Creatio\",\n  \"restartAllowed\": 0,\n  \"responseCode\": \"-20080\",\n  \"responseMessage\": \"Ошибка сервиса списания с карт: Not sufficient funds available\",\n  \"responseErrBackTrace\": \"ORA-06512: на  \\\"COLVIR.ABSGATE$UNIVERSALPAYMENT\\\", line 413\",\n  \"body\": [\n    {\n      \"responseCode\": \"-20080\",\n      \"responseMessage\": \"Ошибка сервиса списания с карт: Not sufficient funds available\",\n      \"responseErrBackTrace\": \"ORA-06512: на  \\\"COLVIR.ABSGATE$UNIVERSALPAYMENT\\\", line 413\"\n    }\n  ]\n}", "source": "c94bf765-74e5-4833-86ba-6821112db3d1-attachment.txt", "type": "text/plain"}], "start": 1715423882441, "stop": 1715423882448}], "parameters": [{"name": "accountDebit", "value": "{'department': '125008', 'number': '1250820004775119', 'currency': 'KGS', 'name': 'Мухамеджанова Марьям Ахмаджано', 'inn': '12006200000711', 'cardFl': 1, 'processing': 'OW4'}"}, {"name": "accountCredit", "value": "{'department': '125008', 'number': '1250820101177557', 'currency': 'USD', 'name': 'Дубов Александр Вадимович', 'inn': '22708199600981', 'cardFl': 0, 'processing': 'COLVIR'}"}], "start": 1715423875351, "stop": 1715423882449, "uuid": "ce08e37f-4506-4110-bf48-c151539eb068", "historyId": "bd18afcf5e0d4243e32bce95daa4e2d6", "testCaseId": "f79270aa82b5695168cc8fbfeb05ab43", "fullName": "013_service_test.TestAmountSuite#test_specific_accountDebit_and_accountCredit_USD", "labels": [{"name": "subSuite", "value": "Тесты с различными значениями для счета дебета(accountDebit) и счета кредита(accountCredit)"}, {"name": "suite", "value": "Перевод с карты на счет клиента (013 сервис)"}, {"name": "host", "value": "PC-411-140322D"}, {"name": "thread", "value": "23648-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "013_service_test"}]}